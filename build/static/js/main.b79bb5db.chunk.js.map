{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","reference","useRef","messagesRef","collection","query","orderBy","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","event","target","type","props","messageClass","src","alt","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAqB3B,SAASC,IAKP,OACE,wBAAQC,UAAU,UAASC,QALJ,WACvB,IAAMC,EAAW,IAAIf,IAASU,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAGrB,iCAIJ,SAASG,IACP,OAAOR,EAAKS,aACV,wBAAQL,QAAS,kBAAMJ,EAAKU,WAA5B,sBAIJ,SAASC,IACP,IAAMC,EAAYC,mBACZC,EAAcb,EAAUc,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAHhB,EAKCC,YAAkBF,EAAO,CAACG,QAAS,OAA/CC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KASZC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,yDAElBD,EAAEE,iBACgB,KAAdL,EAHc,yBAKUtB,EAAKS,YAAvBmB,EALQ,EAKRA,IAAKC,EALG,EAKHA,SALG,SAOVf,EAAYgB,IAAI,CACpBC,KAAMT,EACNU,UAAW1C,IAASW,UAAUgC,WAAWC,kBACzCN,MACAC,aAXc,OAchBN,EAAa,IACbX,EAAUuB,QAAQC,eAAe,CAAEC,SAAU,WAf7B,2CAAH,sDAkBjB,OACE,qCACE,iCACGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAEvD,sBAAMC,IAAK/B,OAGb,uBAAMgC,SAAUpB,EAAhB,UAEE,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAAAC,GAAK,OAAIxB,EAAawB,EAAMC,OAAOH,UAEtE,wBAAQI,KAAK,SAAb,0BAMR,SAAST,EAAYU,GAAQ,IAAD,EACMA,EAAMT,QAA9BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SAEbsB,EAAevB,IAAQ5B,EAAKS,YAAYmB,IAAM,OAAS,WAE7D,OACE,sBAAKzB,UAAS,kBAAagD,GAA3B,UACE,qBAAKC,IAAMvB,EAAUwB,IAAI,aACzB,4BAAItB,OAIKuB,MA3Ff,WAAgB,IAAD,EAEEC,YAAavD,GAArBwD,EAFM,oBAIb,OACE,sBAAKrD,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qDACA,cAACK,EAAD,OAGF,kCACIgD,EAAO,cAAC7C,EAAD,IAAe,cAACT,EAAD,UCzBjBuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b79bb5db.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { useRef, useState } from 'react';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyC-S3P93QI44MLMxKRCaD-tiMpmeaG5lnI\",\n  authDomain: \"chat-demo-ed6cc.firebaseapp.com\",\n  databaseURL: \"https://chat-demo-ed6cc.firebaseio.com\",\n  projectId: \"chat-demo-ed6cc\",\n  storageBucket: \"chat-demo-ed6cc.appspot.com\",\n  messagingSenderId: \"113236022379\",\n  appId: \"1:113236022379:web:c49d2afd7a3bd01f84cd2e\",\n  measurementId: \"G-3W6FRTGGMF\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to my chat!</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        { user ? <ChatRoom /> : <SignIn /> }\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  return(\n    <button className=\"sign-in\"onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom() {\n  const reference = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt');\n\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue] = useState('')\n\n  const sendMessage = async(e) => {\n    \n    e.preventDefault();\n    if (formValue !== \"\"){\n\n      const { uid, photoURL } = auth.currentUser;\n      \n      await messagesRef.add({\n        text: formValue,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        photoURL\n      })    \n      \n      setFormValue('');\n      reference.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n  return (\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n        <span ref={reference}></span>\n      </main>\n\n      <form onSubmit={sendMessage}>\n\n        <input value={formValue} onChange={event => setFormValue(event.target.value)}/>\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src= {photoURL} alt=\"whatever\" />\n      <p>{text}</p>\n    </div>\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}